{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------------------------------\n",
      "Time: 2021-06-25 11:44:15\n",
      "-------------------------------------------\n",
      "{'customerid': '40EH!$', 'transaction_complete_dtm': 1567353209000000, 'payment_type': 'WECHAT', 'total_amount': -1600.0, 'other_amount': 1600.0}\n",
      "{'customerid': '+J$$JzJJ', 'transaction_complete_dtm': 1567351056000000, 'payment_type': 'WECHAT', 'total_amount': 4000.0, 'other_amount': 4000.0}\n",
      "{'customerid': '+$b4zJ!z', 'transaction_complete_dtm': 1567351374000000, 'payment_type': 'WECHAT', 'total_amount': -15000.0, 'other_amount': 15000.0}\n",
      "...\n",
      "\n",
      "+--------+-------------------+---------+----------+-------+\n",
      "|customerid|transaction_complete_dtm|payment_type |total_amount|other_amount  |\n",
      "+--------+-------------------+---------+----------+-------+\n",
      "|40EH!$  |1567353209000000   |WECHAT   |-1600.0   |1600.0 |\n",
      "|+J$$JzJJ|1567351056000000   |WECHAT   |4000.0    |4000.0 |\n",
      "|+$b4zJ!z|1567351374000000   |WECHAT   |-15000.0  |15000.0|\n",
      "|4$JEbH$b|1567350594000000   |ALIPAY   |20000.0   |20000.0|\n",
      "|40zHEE4$|1567350395000000   |WECHAT   |4000.0    |4000.0 |\n",
      "|$zHEEz4H|1567352281000000   |WECHAT   |-1100.0   |1100.0 |\n",
      "|4H40$EJ |1567353557000000   |WECHAT   |-15000.0  |15000.0|\n",
      "|+H+$b!  |1567351901000000   |WECHAT   |-10500.0  |10500.0|\n",
      "|+!zH0!!E|1567352327000000   |WECHAT   |-15000.0  |15000.0|\n",
      "|4JJH+JE0|1567350933000000   |WECHAT   |-9500.0   |9500.0 |\n",
      "|+4E!H+z!|1567350168000000   |ALIPAY   |20000.0   |20000.0|\n",
      "|+H+E$EzE|1567351496000000   |WECHAT   |1000.0    |1000.0 |\n",
      "|+!4HHJH$|1567353472000000   |WECHAT   |500.0     |500.0  |\n",
      "|4+b0z!Jz|1567351660000000   |WECHAT   |-700.0    |700.0  |\n",
      "|40!Hz$!+|1567350469000000   |WECHAT   |-8500.0   |8500.0 |\n",
      "|+J$J!zEz|1567352256000000   |WECHAT   |-8500.0   |8500.0 |\n",
      "|+bHEEE+$|1567353004000000   |WECHAT   |20000.0   |20000.0|\n",
      "|4JHH4+H |1567351673000000   |WECHAT   |-12000.0  |12000.0|\n",
      "|JzH0+4$!|1567351400000000   |WECHAT   |-11000.0  |11000.0|\n",
      "|4+!H!$4$|1567350336000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|+HE0++0$|1567351442000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|JzJ!zJ4J|1567350823000000   |ALIPAY   |10000.0   |10000.0|\n",
      "|+0+!0z!H|1567351841000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|JE+EHE4!|1567351346000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|4+0EHJ++|1567351618000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|Jz!$+z+b|1567353347000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|+bb++!!H|1567353074000000   |WECHAT   |-16000.0  |16000.0|\n",
      "|+0zE+E4H|1567352265000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|40bz4000|1567353111000000   |WECHAT   |-15000.0  |15000.0|\n",
      "|J$zH44zz|1567353214000000   |WECHAT   |-30000.0  |30000.0|\n",
      "|+HJE04bH|1567352255000000   |WECHAT   |-12000.0  |12000.0|\n",
      "|+HJE04bH|1567351999000000   |WECHAT   |-16000.0  |16000.0|\n",
      "|4+!E$bE+|1567352057000000   |WECHAT   |-1600.0   |1600.0 |\n",
      "|4J0bJ4Eb|1567351561000000   |WECHAT   |-3500.0   |3500.0 |\n",
      "|+E+4$0+!|1567352871000000   |WECHAT   |-9000.0   |9000.0 |\n",
      "|+H0$!$4z|1567350471000000   |WECHAT   |-4400.0   |4400.0 |\n",
      "|+$b4zJ!z|1567353142000000   |WECHAT   |-9000.0   |9000.0 |\n",
      "|40+00H0J|1567351032000000   |WECHAT   |-9000.0   |9000.0 |\n",
      "|4JJ$$!4$|1567353514000000   |WECHAT   |-50000.0  |50000.0|\n",
      "|4+b$z44H|1567350706000000   |ALIPAY   |4000.0    |4000.0 |\n",
      "|$EE$!z!!|1567353006000000   |CCCARD   |500.0     |500.0  |\n",
      "|+bbEJE+E|1567350909000000   |ALIPAY   |-10000.0  |10000.0|\n",
      "|Jb4HJz00|1567351798000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|$EE$!z!!|1567352571000000   |CCCARD   |500.0     |500.0  |\n",
      "|4$4$4$Hb|1567353506000000   |WECHAT   |2000.0    |2000.0 |\n",
      "|$z!J+!+b|1567351603000000   |WECHAT   |-500.0    |500.0  |\n",
      "|4$EzE0zJ|1567350213000000   |WECHAT   |-500.0    |500.0  |\n",
      "|+bbEJE+E|1567350845000000   |WECHAT   |-15500.0  |15500.0|\n",
      "|+bbEJE+E|1567350057000000   |WECHAT   |-12000.0  |12000.0|\n",
      "|+EJ0HH+E|1567351446000000   |WECHAT   |-500.0    |500.0  |\n",
      "+--------+-------------------+---------+----------+-------+\n",
      "only showing top 50 rows\n",
      "\n"
     ]
    },

    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------------------------------\n",
      "Time: 2021-06-25 11:44:20\n",
      "-------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "KAFKA_TOPIC  = \"IZkafkatopic.public.testiz\"\n",
    "KAFKA_BOOTSTRAP_SERVERS_CONS = hname2\n",
    "n_secs=5\n",
    "\n",
    "customparksession.sparkContext.setLogLevel(\"WARN\")\n",
    "#sc=customparksession.sparkContext\n",
    "#ssc = StreamingContext(sc,n_secs)\n",
    "ssc = StreamingContext(customparksession.sparkContext,n_secs)\n",
    "\n",
    "topicPartion = TopicAndPartition(KAFKA_TOPIC,0)\n",
    "fromOffset = {topicPartion: 0}\n",
    "\n",
    "directkafkastream = KafkaUtils.createDirectStream(ssc,[KAFKA_TOPIC], \n",
    "                                            {'bootstrap.servers':KAFKA_BOOTSTRAP_SERVERS_CONS,\n",
    "                                            #'startingoffsets':'earliest',\n",
    "                                             #'auto.offset.reset':'smallest',\n",
    "                                             #\"max.poll.records\":'100'\n",
    "                                             #,'fetch.message.max.bytes':'15728640'\n",
    "                                            }\n",
    "                                            ,fromOffsets=fromOffset)\n",
    "\n",
    "\n",
    "#testingdfparsed = directkafkastream.map(lambda v: json.loads(v.decode('utf-8')[1]))\n",
    "#testingdfparsed = directkafkastream.map(lambda x: json.loads(x[1]))  \n",
    "\n",
    "schema = StructType([\n",
    "    StructField('customerid', StringType(), True),\n",
    "    #StructField('transaction_complete_dtm', DecimalType(scale=2), True),\n",
    "    StructField('transaction_complete_dtm', StringType(), True),\n",
    "    StructField('payment_type', StringType(), True),\n",
    "    StructField('total_amount', FloatType(), True),\n",
    "    StructField('other_amount', FloatType(), True)\n",
    "])\n",
    "\n",
    "\n",
    "    \n",
    "#def main():\n",
    "#    sc = SparkContext(appName=\"PysparkStreaming\")\n",
    "#    spark = SparkSession(sc)\n",
    "#    ssc = StreamingContext(sc, 5)\n",
    "#    dstream = ssc.textFileStream(folder_path)\n",
    "#    transformed_dstream = # transformations\n",
    "\n",
    "#    transformed_dstream.foreachRDD(lambda rdd: process_stream(rdd, spark))\n",
    "\n",
    "    \n",
    "def streamrdd_to_df(srdd):\n",
    "    sdf = customparksession.createDataFrame(srdd,schema)\n",
    "    sdf.show(n=50, truncate=False)\n",
    "    return sdf\n",
    "\n",
    "def Iversondoingsomethingsilly():\n",
    "    #inrdd = indata.map(lambda r: get_tuple(r))\n",
    "    inrdd = directkafkastream.map(lambda m: json.loads(m[1]))\n",
    "    inrdd.pprint(num=3)\n",
    "    streaming_df = inrdd.foreachRDD(streamrdd_to_df)\n",
    "\n",
    "    ssc.start()\n",
    "    ssc.awaitTermination()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    Iversondoingsomethingsilly()\n",
    "    \n",
    "    \n",
    "####old script no use\n",
    "#def process_stream(record, spark):\n",
    "#    if not record.isEmpty():\n",
    "#        df = customparksession.createDataFrame(record,schema) \n",
    "#        df.show(n=1)\n",
    "        \n",
    "#directkafkastream.foreachRDD(lambda m: process_stream(m, customparksession))\n",
    "\n",
    "#def printsssss():\n",
    "#    print(\"Iverson is doing something silly:\\n\")\n",
    "#    testingdfparsed.pprint() \n",
    "\n",
    "#Iversondoingsomethingsilly = testingdfparsed\n",
    "\n",
    "#def pleasegoaway(\n",
    "#    #time, rdd\n",
    "#):\n",
    "#    #print(\"========= %s =========\" % str(time))\n",
    "#    try:\n",
    "#        ## Get the singleton instance of SparkSession\n",
    "#        ##spark = getSparkSessionInstance(rdd.context.getConf())\n",
    "\n",
    "#        # Convert RDD[String] to RDD[Row] to DataFrame\n",
    "    \n",
    "#        rdd=customparksession.sparkContext.parallelize([Iversondoingsomethingsilly])\n",
    "#        #rowRdd = rdd.map(lambda w: Row(Iversondoingsomethingsilly=w))\n",
    "#        convertedDataFrame = customparksession.createDataFrame(rdd,schema)\n",
    "         \n",
    "#        # Creates a temporary view using the DataFrame\n",
    "#        convertedDataFrame.createOrReplaceTempView(\"yousuck\")\n",
    "        \n",
    "#        # Select table using SQL and print it\n",
    "#        convertedDataFrame2 = spark.sql(\"select * from yousuck\")\n",
    "#        convertedDataFrame2.show(n=1)\n",
    "#    except:\n",
    "#        pass\n",
    "\n",
    "\n",
    "#printsssss()\n",
    "#pleasegoaway()\n",
    "#Iversondoingsomethingsilly.foreachRDD(pleasegoaway)\n",
    "\n",
    "#kafka_df = testingdfparsed\n",
    "#kafka_df.select(psf.get_json_object(kafka_df['value'],\"$.payload\").alias('payload'))\\\n",
    "#.select(psf.from_json(psf.col('payload'), payload_schema).alias(\"DF\"))\\\n",
    "#.select(\"DF.*\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#customparksession.stop()\n",
    "#ssc.stop()\n",
    "#customparksession.sparkContext.stop()\n",
    "#ssc.stop()\n",
    "\n",
    "#ssc.start()\n",
    "#ssc.awaitTermination()\n",
    "#ssc.stop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('ProgramData': virtualenv)",
   "name": "python385jvsc74a57bd0b3ba2566441a7c06988d0923437866b63cedc61552a5af99d1f4fb67d367b25f"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
